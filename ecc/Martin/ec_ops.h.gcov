        -:    0:Source:ec_ops.h
        -:    0:Graph:ec.gcno
        -:    0:Data:ec.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef ZP_H
        -:    2:#define ZP_H
        -:    3:
        -:    4:#include <iostream>
        -:    5:#include <utility>
        -:    6:#include "uberzahl.h"
        -:    7:using namespace std;
        -:    8:
        -:    9:
        -:   10:/*
        -:   11: * Parameters for EC and transform into constants
        -:   12: */
        -:   13:
        -:   14:#define PRIME_STR "115792089237316195423570985008687907853269984665640564039457584007913129639747"
        -:   15:#define ORDER_STR "115792089237316195423570985008687907853233080465625507841270369819257950283813"
        -:   16:#define A_STR  "-3"
        -:   17:#define B_STR  "25581"  //in hex
        -:   18:#define GX_STR "004F734B 6790D3E5 247FE3DD B4D61F50 24BA2AC0 4BBC1182 3A5D9895 1DC8B48B"
        -:   19:#define GY_STR "10406987 8EEB9C02 D4972630 BF469384 7658942D 8784174F 7C2281E3 F4A8FCC4"
        -:   20:#define MESSAGE0_STR "102501952645538804965012053167150917101618713464079480886877504892990170212995"
        -:   21:#define MESSAGE1_STR "78269492218290584456200150978164075757011280592962175766832158488911648515458"
        -:   22:#define XA_STR      "34561875026648536864764782987389742234992315461526976004626546308686166324417" //private Key of receiver
        -:   23:#define XB_STR      "7864444799928188707972212131590304337952418237266735010547675839370292882522" //private key of sender
        -:   24:
        -:   25:
        -:   26:
        1:   27:const uberzahl PRIME(PRIME_STR);
        1:   28:const uberzahl ORDER(ORDER_STR);
        1:   29:const uberzahl A(A_STR);
        1:   30:const uberzahl B(B_STR,16);
        1:   31:const uberzahl GX(GX_STR,16);
        1:   32:const uberzahl GY(GY_STR,16);
        1:   33:const uberzahl MESSAGE0(MESSAGE0_STR);
        1:   34:const uberzahl MESSAGE1(MESSAGE1_STR);
        1:   35:const uberzahl XA(XA_STR); //private key of receiver
        1:   36:const uberzahl XB(XB_STR); //private key of sender
        -:   37:
        -:   38:/*
        -:   39: * class Zp: An element in GF(p)
        -:   40: */
   407897:   41:class Zp{
        -:   42:
        -:   43:	// Overloading cout
        -:   44:	friend ostream& operator<<(ostream& output, const Zp& a);
        -:   45:
        -:   46:	private:
        -:   47:	uberzahl value;
        -:   48:	
        -:   49:	public:
    36323:   50:	Zp(){}
   161224:   51:	Zp(const uberzahl v){ 
   161224:   52:		value = v; 
   161224:   53:		if(value >= PRIME || value < "0")
    72115:   54:			value = value % PRIME; 
   161224:   55:	}
    24420:   56:	Zp(const int v){ 
    24420:   57:		value = v; 
    24420:   58:		if(value>=PRIME || value < "0")
    #####:   59:			value = value % PRIME; 
    24420:   60:	}
       24:   61:	uberzahl getValue() const { return value; }
        -:   62:
        -:   63:	Zp operator + (const Zp &a) const;
        -:   64:	Zp operator - (const Zp &a) const;
        -:   65:	Zp operator - () const;
        -:   66:	Zp operator * (const Zp &a) const;
        -:   67:	bool operator == (const Zp &a) const;
        -:   68:	Zp inverse() const;
        -:   69:};
        -:   70:
        -:   71:
        -:   72:/* 
        -:   73: * class ECpoint: A point on an elliptic curve
        -:   74: */
    24514:   75:class ECpoint{
        -:   76:
        -:   77:	// Overloading cout
        -:   78:	friend ostream& operator<<(ostream& output, const ECpoint& a);
        -:   79:
        -:   80:	public:
        -:   81:	Zp x;
        -:   82:	Zp y;
        -:   83:	bool infinityPoint; //If true, the point is the infinity point
        -:   84:
       16:   85:	ECpoint(){
       16:   86:		infinityPoint = false;}
    12079:   87:	ECpoint(Zp xx, Zp yy){ x = xx; y =  yy; infinityPoint = false;}
       37:   88:	ECpoint(bool inf){ infinityPoint = inf;}
        -:   89:
        -:   90:	ECpoint repeatSum(ECpoint p, uberzahl v) const;
        -:   91:	bool operator == (const ECpoint &a) const;
        -:   92:	ECpoint operator + (const ECpoint &a) const;
        -:   93:};
        -:   94:ECpoint operator * (const uberzahl &a, const ECpoint &b);
        -:   95:
        -:   96:
        -:   97:/*
        -:   98: * class ECsystem: Encryption and decryption functions of ec
        -:   99: */
        8:  100:class ECsystem{
        -:  101:	private:
        -:  102:		uberzahl privateKey;
        -:  103:		ECpoint publicKey;
        -:  104:		ECpoint G; //Generator G
        -:  105:		Zp power(Zp base, uberzahl pow);
        -:  106:		uberzahl pointCompress(ECpoint e);
        -:  107:		ECpoint pointDecompress(uberzahl compressedPoint);
        -:  108:	public:
        -:  109:
        8:  110:		ECsystem(){ G = ECpoint(GX, GY);}
        -:  111:		ECpoint getPublicKey(){ return publicKey;}
        -:  112:		
        -:  113:		pair <ECpoint, uberzahl> generateKeys();		
        -:  114:
        -:  115:		
        -:  116:		pair <pair<Zp,Zp>,uberzahl> encrypt(ECpoint publicKey, uberzahl privateKey, Zp plaintext0, Zp plaintext1);
        -:  117:		pair <Zp,Zp> decrypt(pair<pair<Zp,Zp>,uberzahl> cm);
        -:  118:};
        -:  119:
        -:  120:#endif
        -:  121:
